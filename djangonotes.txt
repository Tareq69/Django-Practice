
Python virtualenv creation -> py -m venv project-name
Python virtualenv activation -> Scripts\activate.bat
Djnago install -> py -m pip install Django
Django project creation-> django-admin startproject projectname
Django app creation-> python manage.py startapp appname

-------------------------------- Views, URLs and Templates--------------------------------------------

Views -> View is the web view that is shown when we enter a url in our browser search engine. In django when we request for a url , it first opens urls.py and then returns a corresponding views.py. Use different Urls.py for different apps. Connect these urls.py with Urls.py of main project files urls.py

urls.py for an app -> from django.conf.urls import  url
from django.urls import paths
from appname import views

templates-> Templates folder will hold the html files for every app. Join templates folder in settings.py using 
  TEMPLATES_DIR = os.path.join(BASE_DIR,'templates'), Also include this directory in templates dictionary of settings.py, 'DIRS': [TEMPLATES_DIR,],

Static files-> css,image,song,video,javascript codes etc. Static file holds these. 
	STATIC_DIR = os.path.join(BASE_DIR,'static'), STATIC_URL = '/static/'
STATICFILES_DIRS = [
    STATIC_DIR,
]
{% load static %} in the top of html file. Also use {"%static "images/abc.jpg"  %"} to load any static files from the static folder.


--------------------------------     Models  --------------------------------------------

We need databases to store information. Django gives us default database sqlite.

We need django models to work with databases in django. Sqlite is usd for normal/ small projcts. For Big projcts we need databases like sqlite/mongodb.
Every django app has a models.py folder. Migration is needed to create and update the database. 
shell command -> Py manage.py shell 
import model-> from appname.models import modelname. function to print database values-> def __str__(self):


--------------------------------------------------- Migration commands----------------------------------------
1) py manage.py migrate
2) py manage.py makemigrations appname
3)py manage.py migrate

------------------------------------- Django admin panel ----------------------------------------------------

Admin panel is given by django for us to insert data and do other things easily. First import the models in admin.py. Then register them. Finally, create a superuser to access the admin site using py manage.py createsuperuser command.

---------------------------------------- Django Forms-----------------------------------------------

 We can create forms using Djangos library. They are similar to html forms.

A sample form -> from django import forms

class user_form(forms.Form):

    # label for ="User_name"
    # input type="text" name="user_name">
    user_name = forms.CharField()

    # label for ="User_name"
    # input type="email" name="user_name">
    user_email =  forms.EmailField()

with parameters -> user_name = forms.CharField(label="Your name", max_length = 20, widget= forms.TextInput(attrs ={'placeholder':"Enter your fullname"}))

Form Submission ->  if request.method =='POST':
        new_form = forms.user_form(request.POST)


    if new_form.is_valid():
        user_name = new_form.cleaned_data['user_name']
        dob = new_form.cleaned_data['dob']
        user_email = new_form.cleaned_data['user_email']

        dic.update({'user_name': user_name})
        dic.update({'dob': dob})
        dic.update({'user_email': user_email})
        dic.update({'form_submitted':'Yes'})


Validators.

Django Model Forms->	
forms.py				
from django import forms
from django.core import validators
from home.models import Musician,Album

class Musician_form(forms.ModelForm): # creating forms using model objects
    class Meta:
        model = Musician #model name
        fields = "__all__" #selected fields

Views.py
def form(request):
    new_form = forms.Musician_form()

    if request.method == "POST":
        new_form = forms.Musician_form(request.POST)

    if new_form.is_valid():
        new_form.save(commit=True)
        return index(request)
    dic = {'tform': new_form}

    return render(request, 'home/form.html', context = dic)



--------------------------------------------------- Relative URLS ----------------------------------------------

Hardcoded URL is not preferred to use. Example: <a href="/form">Form</a>
So, we will use relative urls. 
In urls.py -> app_name = "home"
in anchor tag define a relative url using "{% url 'appname:name used in urls.py' %}". Example-> <a href="{% url 'home:form' %}">Add new Musicians</a>


----------------------------------- Template Inheritence and Filters--------------------------------------------
Inherit a base.html file that we want to view in the all the page of the website. For that create a base.html file and then :
{% extends "home/base.html" %} use this on the pages where we want to use this base.html codes. Then write the own unique styles of that specific page in the block 

{% block body_block %}

{% endblock %}

Template filters -> Template filters can be used to filter data as we want. Example: {{data|upper}} will return the data in uppercase. Django has some built in filters.

Custom template filters-> If a required filter is not available built in in Django, We can build our own custom filters. First create templatetags folder in project folder. Then crate 2 python file. 1 is __init__.py and other is the custom filter python file. Then create a customer filter like this..

from django import template

register = template.Library()

def my_filter(value):
    return value + 100

register.filter('custom_filter', my_filter)


--------------------------------------------- CRUD Using Mysql -------------------------------------------





------------------------------------------ User Authentication -------------------------------------------------------

Django already has given us some tools to add user and validate them. GO to django admin panel and their we can see the user table where list of users will show up.


------------------------------------ Class Based View----------------------------------------------------

Example of viewing with class instead of function view -> 

			----------------------TemplateView---------------------
class indexView(TemplateView):
    template_name = 'first_app/index1.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['s1'] = 'sameple text 1'
        context['s2'] = 'sample text 2'
        return context

        return context

				--------------------ListView-------------------------
class indexView2(ListView):
    context_object_name = 'Fighter_list'
    model = models.Fighter
    template_name = 'first_app/index1.html'








	





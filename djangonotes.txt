
Python virtualenv creation -> py -m venv project-name
Python virtualenv activation -> Scripts\activate.bat
Djnago install -> py -m pip install Django
Django project creation-> django-admin startproject projectname
Django app creation-> python manage.py startapp appname

-------------------------------- Views, URLs and Templates--------------------------------------------

Views -> View is the web view that is shown when we enter a url in our browser search engine. In django when we request for a url , it first opens urls.py and then returns a corresponding views.py. Use different Urls.py for different apps. Connect these urls.py with Urls.py of main project files urls.py

templates-> Templates folder will hold the html files for every app. Join templates folder in settings.py using 
  TEMPLATES_DIR = os.path.join(BASE_DIR,'templates'), Also include this directory in templates dictionary of settings.py, 'DIRS': [TEMPLATES_DIR,],

Static files-> css,image,song,video,javascript codes etc. Static file holds these. 
	STATIC_DIR = os.path.join(BASE_DIR,'static'), STATIC_URL = '/static/'
STATICFILES_DIRS = [
    STATIC_DIR,
]
{% load static %} in the top of html file. Also use {"%static "images/abc.jpg"  %"} to load any static files from the static folder.


--------------------------------     Models  --------------------------------------------

We need databases to store information. Django gives us default database sqlite.

We need django models to work with databases in django. Sqlite is usd for normal/ small projcts. For Big projcts we need databases like sqlite/mongodb.
Every django app has a models.py folder. Migration is needed to create and update the database. 
shell command -> Py manage.py shell 
import model-> from appname.models import modelname. function to print database values-> def __str__(self):


--------------------------------------------------- Migration commands----------------------------------------
1) py manage.py migrate
2) py manage.py makemigrations appname
3)py manage.py migrate
---------------------------------------- Django Forms-----------------------------------------------

 We can create forms using Djangos library. They are similar to html forms.

A sample form -> from django import forms

class user_form(forms.Form):

    # label for ="User_name"
    # input type="text" name="user_name">
    user_name = forms.CharField()

    # label for ="User_name"
    # input type="email" name="user_name">
    user_email =  forms.EmailField()

with parameters -> user_name = forms.CharField(label="Your name", max_length = 20, widget= forms.TextInput(attrs ={'placeholder':"Enter your fullname"}))

Form Submission ->  if request.method =='POST':
        new_form = forms.user_form(request.POST)


    if new_form.is_valid():
        user_name = new_form.cleaned_data['user_name']
        dob = new_form.cleaned_data['dob']
        user_email = new_form.cleaned_data['user_email']

        dic.update({'user_name': user_name})
        dic.update({'dob': dob})
        dic.update({'user_email': user_email})
        dic.update({'form_submitted':'Yes'})


Validators.

Django Model Forms->	
forms.py				
from django import forms
from django.core import validators
from home.models import Musician,Album

class Musician_form(forms.ModelForm): # creating forms using model objects
    class Meta:
        model = Musician #model name
        fields = "__all__" #selected fields

Views.py
def form(request):
    new_form = forms.Musician_form()

    if request.method == "POST":
        new_form = forms.Musician_form(request.POST)

    if new_form.is_valid():
        new_form.save(commit=True)
        return index(request)
    dic = {'tform': new_form}

    return render(request, 'home/form.html', context = dic)



--------------------------------------------------- Relative URLS-------------------------------------------------------------------------------------------------

Hardcoded URL is not preferred to use. Example: <a href="/form">Form</a>
So, we will use relative urls. 
In urls.py -> app_name = "home"
in anchor tag define a relative url using "{% url 'appname:name used in urls.py' %}". Example-> <a href="{% url 'home:form' %}">Add new Musicians</a>


----------------------------------- Template Inheritence -----------------------------------------------------------------------------------------------------------
Inherit a base.html file that we want to view in the all the page of the website. For that create a base.html file and then :
{% extends "home/base.html" %} use this on the pages where we want to use this base.html codes. Then write the own unique styles of that specific page in the block 

{% block body_block %}

{% endblock %}








------------------------------------- Django admin panel ----------------------------------------------------

Admin panel is given by django for us to insert data and do other things easily. First import the models in admin.py. Then register them. Finally, create a superuser to access the admin site using py manage.py createsuperuser command.